{"version":3,"file":"static/js/387.f6fa6280.chunk.js","mappings":"sSAGaA,EAAcC,EAAAA,QAAAA,IAAH,+IAKpBC,EAAAA,EAAAA,GAAa,SAAbA,CALoB,yCASXC,EAAaF,EAAAA,QAAAA,GAAH,kUAInBC,EAAAA,EAAAA,GAAa,SAAbA,CAJmB,mEAYjBA,EAAAA,EAAAA,GAAa,SAAbA,CAZiB,wCAcjBA,EAAAA,EAAAA,GAAa,UAAbA,CAdiB,wC,sCCqDvB,EAzDa,WACX,OAAqBE,EAAAA,EAAAA,MAAbC,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,KACZ,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,oGAEZF,GAAW,GAFC,UAGOG,EAAAA,EAAAA,GAAM,IAAD,OACT,WAATV,EAAoB,QAAUA,EADZ,YACoBD,EADpB,aAHZ,OAGNG,EAHM,OAMZC,EAAQD,EAAKS,KAAKT,MANN,gDAQZG,EAAS,2CARG,yBAUZE,GAAW,GAVC,4EAAH,qDAabE,GACD,GAAE,CAACV,EAAIC,KAGN,8BACGQ,EAAAA,YACC,UAACd,EAAD,WACGQ,EAAKU,OAAS,IACb,SAACf,EAAD,UACGK,EAAKW,MAAM,EAAG,GAAGC,KAAI,YAA4C,IAAzCf,EAAwC,EAAxCA,GAAIgB,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAC/C,OACE,2BACE,gBACEC,IAAG,yCAAoCH,GACvCI,IAAKH,EACLV,QAAQ,UAEV,4BACE,wBAAKU,KACL,uBAAIC,SARClB,EAYZ,MAGJS,EAAAA,WAAaN,EAAKU,OAAS,IAAMN,IAChC,SAAC,IAAD,CAAcJ,MAAM,EAApB,8BAEDE,GAASgB,EAAAA,OAAAA,QAAehB,EAAMiB,SAC9Bf,IAAW,SAACgB,EAAA,EAAD,CAAQC,OAAK,QAKlC,C,2FC5DYC,EAAe7B,EAAAA,QAAAA,EAAH,wKAGG,SAAA8B,GAAK,OAAIA,EAAMvB,MAAQ,KAAlB,IAG7BN,EAAAA,EAAAA,GAAa,SAAbA,CANqB,wC","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","styles/NoDataMessage.styled.js"],"sourcesContent":["import styled from 'styled-components';\nimport { mediaQueries } from 'styles/mediaQueries';\n\nexport const CastWrapper = styled.div`\n  padding: 26px 20px;\n  border-radius: 16px;\n  border-top-left-radius: 0;\n  background-color: var(--bgSec);\n  ${mediaQueries('tablet')`\n  padding: 30px;`}\n`;\n\nexport const CastStyled = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  ${mediaQueries('tablet')`\n  flex-direction: row;\n  flex-wrap: wrap;`}\n\n  li {\n    display: flex;\n    gap: 20px;\n    align-items: center;\n    ${mediaQueries('tablet')`\n  width: 300px;`}\n    ${mediaQueries('desktop')`\n  width: 350px;`}\n\n    img {\n      width: 150px;\n      height: 225px;\n      border-radius: 8px;\n    }\n\n    h3 {\n      margin-bottom: 10px;\n    }\n  }\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetch } from 'API';\nimport { CastStyled, CastWrapper } from './Cast.styled';\nimport { Loader } from 'components/Loader/Loader';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { NoDataStyled } from 'styles/NoDataMessage.styled';\n\nconst Cast = () => {\n  const { id, type } = useParams();\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const getCast = async () => {\n      try {\n        setLoading(true);\n        const cast = await fetch(\n          `/${type === 'search' ? 'movie' : type}/${id}/credits`\n        );\n        setCast(cast.data.cast);\n      } catch {\n        setError('Something went wrong. Please try again.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    getCast();\n  }, [id, type]);\n\n  return (\n    <>\n      {useEffect && (\n        <CastWrapper>\n          {cast.length > 0 && (\n            <CastStyled>\n              {cast.slice(0, 6).map(({ id, profile_path, name, character }) => {\n                return (\n                  <li key={id}>\n                    <img\n                      src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                      alt={name}\n                      loading=\"lazy\"\n                    ></img>\n                    <div>\n                      <h3>{name}</h3>\n                      <p>{character}</p>\n                    </div>\n                  </li>\n                );\n              })}\n            </CastStyled>\n          )}\n          {useEffect && cast.length < 1 && !loading && (\n            <NoDataStyled cast={true}>Cast unavailable</NoDataStyled>\n          )}\n          {error && Notify.failure(error.message)}\n          {loading && <Loader white />}\n        </CastWrapper>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\nimport { mediaQueries } from './mediaQueries';\n\nexport const NoDataStyled = styled.p`\n  padding: 26px 20px;\n  border-radius: 16px;\n  border-top-left-radius: ${props => props.cast && '0px'};\n  background-color: var(--bgSec);\n  color: var(--text);\n  ${mediaQueries('tablet')`\n  padding: 30px;`}\n`;\n"],"names":["CastWrapper","styled","mediaQueries","CastStyled","useParams","id","type","useState","cast","setCast","error","setError","loading","setLoading","useEffect","getCast","fetch","data","length","slice","map","profile_path","name","character","src","alt","Notify","message","Loader","white","NoDataStyled","props"],"sourceRoot":""}