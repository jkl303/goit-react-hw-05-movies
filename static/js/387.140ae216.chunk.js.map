{"version":3,"file":"static/js/387.140ae216.chunk.js","mappings":"kSAGaA,EAAaC,EAAAA,QAAAA,GAAH,kbAQnBC,EAAAA,EAAAA,GAAa,SAAbA,CARmB,qFAiBjBA,EAAAA,EAAAA,GAAa,SAAbA,CAjBiB,wCAmBjBA,EAAAA,EAAAA,GAAa,UAAbA,CAnBiB,wC,sCCwDvB,EAnDa,WACX,OAAqBC,EAAAA,EAAAA,MAAbC,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,KACZ,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,oGAEZF,GAAW,GAFC,UAGOG,EAAAA,EAAAA,GAAM,IAAD,OACT,WAATV,EAAoB,QAAUA,EADZ,YACoBD,EADpB,aAHZ,OAGNG,EAHM,OAMZC,EAAQD,EAAKS,KAAKT,MANN,gDAQZG,EAAS,2CARG,yBAUZE,GAAW,GAVC,4EAAH,qDAabE,GACD,GAAE,CAACV,EAAIC,KAGN,gCACGQ,EAAAA,WAAaN,EAAKU,OAAS,GAC1B,SAACjB,EAAD,UACGO,EAAKW,MAAM,EAAG,GAAGC,KAAI,YAA4C,IAAzCf,EAAwC,EAAxCA,GAAIgB,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAC/C,OACE,2BACE,gBACEC,IAAG,yCAAoCH,GACvCI,IAAKH,KAEP,4BACE,wBAAKA,KACL,uBAAIC,SAPClB,EAWZ,OAGH,SAAC,IAAD,CAAcG,MAAM,EAApB,8BAEDE,GAASgB,EAAAA,OAAAA,QAAehB,EAAMiB,SAC9Bf,IAAW,SAACgB,EAAA,EAAD,MAGjB,C,2FCtDYC,EAAe3B,EAAAA,QAAAA,EAAH,wKAGG,SAAA4B,GAAK,OAAIA,EAAMtB,MAAQ,KAAlB,IAG7BL,EAAAA,EAAAA,GAAa,SAAbA,CANqB,wC","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","styles/NoDataMessage.styled.js"],"sourcesContent":["import styled from 'styled-components';\nimport { mediaQueries } from 'styles/mediaQueries';\n\nexport const CastStyled = styled.ul`\n  display: flex;\n  padding: 26px 20px;\n  flex-direction: column;\n  gap: 30px;\n  border-radius: 16px;\n  border-top-left-radius: 0;\n  background-color: var(--bgSec);\n  ${mediaQueries('tablet')`\n  padding: 30px;\n  flex-direction: row;\n  flex-wrap: wrap;`}\n\n  li {\n    display: flex;\n    gap: 20px;\n    align-items: center;\n    ${mediaQueries('tablet')`\n  width: 300px;`}\n    ${mediaQueries('desktop')`\n  width: 350px;`}\n\n    img {\n      width: 150px;\n      height: 225px;\n      border-radius: 8px;\n    }\n\n    h3 {\n      margin-bottom: 10px;\n    }\n  }\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetch } from 'API';\nimport { CastStyled } from './Cast.styled';\nimport { Loader } from 'components/Loader/Loader';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { NoDataStyled } from 'styles/NoDataMessage.styled';\n\nconst Cast = () => {\n  const { id, type } = useParams();\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const getCast = async () => {\n      try {\n        setLoading(true);\n        const cast = await fetch(\n          `/${type === 'search' ? 'movie' : type}/${id}/credits`\n        );\n        setCast(cast.data.cast);\n      } catch {\n        setError('Something went wrong. Please try again.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    getCast();\n  }, [id, type]);\n\n  return (\n    <>\n      {useEffect && cast.length > 0 ? (\n        <CastStyled>\n          {cast.slice(0, 5).map(({ id, profile_path, name, character }) => {\n            return (\n              <li key={id}>\n                <img\n                  src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                  alt={name}\n                ></img>\n                <div>\n                  <h3>{name}</h3>\n                  <p>{character}</p>\n                </div>\n              </li>\n            );\n          })}\n        </CastStyled>\n      ) : (\n        <NoDataStyled cast={true}>Cast unavailable</NoDataStyled>\n      )}\n      {error && Notify.failure(error.message)}\n      {loading && <Loader />}\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\nimport { mediaQueries } from './mediaQueries';\n\nexport const NoDataStyled = styled.p`\n  padding: 26px 20px;\n  border-radius: 16px;\n  border-top-left-radius: ${props => props.cast && '0px'};\n  background-color: var(--bgSec);\n  color: var(--text);\n  ${mediaQueries('tablet')`\n  padding: 30px;`}\n`;\n"],"names":["CastStyled","styled","mediaQueries","useParams","id","type","useState","cast","setCast","error","setError","loading","setLoading","useEffect","getCast","fetch","data","length","slice","map","profile_path","name","character","src","alt","Notify","message","Loader","NoDataStyled","props"],"sourceRoot":""}