{"version":3,"file":"static/js/186.e6669955.chunk.js","mappings":"8MAGAA,EAAAA,EAAAA,SAAAA,QAAA,+BAEO,IAAMC,EAAW,mCAAG,WAAMC,GAAN,uFACFF,EAAAA,EAAAA,IAAUE,EAAU,CACzCC,OAAQ,CACNC,QANU,sCAGW,cACnBC,EADmB,yBAMlBA,GANkB,2CAAH,qD,yGC0CxB,UA3CgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,oGAEfF,GAAW,GAFI,UAGOb,EAAAA,EAAAA,GAAY,UAAD,OAAWK,EAAX,aAHlB,OAGTW,EAHS,OAIfP,EAAgBO,EAAQC,KAAKC,SAJd,gDAMfP,EAAS,2CANM,yBAQfE,GAAW,GARI,4EAAH,qDAWhBE,GACD,GAAE,CAACV,KAGF,2BACGS,EAAAA,WAAaN,EAAaW,OAAS,GAClC,wBACGX,EAAaY,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/B,OACE,2BACE,qCAAaD,MACb,uBAAIC,MAFGF,EAKZ,OAGH,qEAEDX,IAAS,uBAAIA,IACbE,IAAW,wCAGjB,C","sources":["API.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '95e0a9f6333c954132e51c9aa189b3ea';\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\n\nexport const fetchMovies = async endpoint => {\n  const response = await axios.get(endpoint, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response;\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovies } from 'API';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [movieReviews, setMovieReviews] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const getReviews = async () => {\n      try {\n        setLoading(true);\n        const reviews = await fetchMovies(`/movie/${movieId}/reviews`);\n        setMovieReviews(reviews.data.results);\n      } catch {\n        setError('Something went wrong. Please try again.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    getReviews();\n  }, [movieId]);\n\n  return (\n    <div>\n      {useEffect && movieReviews.length > 0 ? (\n        <ul>\n          {movieReviews.map(({ id, author, content }) => {\n            return (\n              <li key={id}>\n                <h3>Author: {author}</h3>\n                <p>{content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>We don't have any reviews for this movie.</p>\n      )}\n      {error && <p>{error}</p>}\n      {loading && <p>Loading...</p>}\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["axios","fetchMovies","endpoint","params","api_key","response","movieId","useParams","useState","movieReviews","setMovieReviews","error","setError","loading","setLoading","useEffect","getReviews","reviews","data","results","length","map","id","author","content"],"sourceRoot":""}