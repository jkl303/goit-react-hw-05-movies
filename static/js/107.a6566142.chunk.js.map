{"version":3,"file":"static/js/107.a6566142.chunk.js","mappings":"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","sources":["components/HoverInfo/HoverInfo.styled.js","components/HoverInfo/HoverInfo.jsx","components/ItemCard/ItemCard.styled.js","components/ItemCard/ItemCard.jsx","images/images.js","pages/Details/Details.styled.js","components/DetailsGenres/DetailsGenresList.styled.js","components/DetailsGenres/DetailsGenres.jsx","components/Similar/SimilarList.styled.js","components/Similar/Similar.jsx","pages/Details/Details.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const HoverInfoStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n  position: absolute;\n  width: 100%;\n  height: 300px;\n  top: 34px;\n  z-index: 1;\n  padding: 14px;\n  border: 2px solid black;\n  border-radius: 12px;\n  font-size: 14px;\n  color: black;\n  background-color: var(--text);\n  animation: toTop 250ms linear;\n  ::before {\n    content: '';\n    position: absolute;\n    width: 10px;\n    top: -13px;\n    right: 16px;\n    border-left: 20px solid transparent;\n    border-right: 2px solid transparent;\n    border-bottom: 12px solid var(--text);\n    animation: toTop 500ms ease-in-out;\n  }\n\n  a {\n    color: var(--bg);\n    font-weight: bold;\n  }\n\n  span {\n    font-weight: bold;\n  }\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport { HoverInfoStyled } from './HoverInfo.styled';\n\nexport const HoverInfo = ({ item, setIsShowDetails }) => {\n  const location = useLocation();\n\n  return (\n    <HoverInfoStyled\n      onMouseOver={() => {\n        setIsShowDetails(true);\n        console.log('over');\n      }}\n      onMouseOut={() => setIsShowDetails(false)}\n    >\n      <Link\n        to={`/details/${item.media_type ? item.media_type : 'movie'}/${\n          item.id\n        }`}\n        state={{ from: location }}\n      >\n        {item.title || item.name}\n      </Link>\n      <p>\n        <span>User score:</span> {item.vote_average.toFixed(2)}\n      </p>\n      <p>\n        <span>Overview:</span> {item.overview.slice(0, 200) + '...'}\n      </p>\n    </HoverInfoStyled>\n  );\n};\n","import styled from 'styled-components';\nimport { mediaQueries } from 'styles/mediaQueries';\nimport { FiInfo } from 'react-icons/fi';\n\nexport const ItemCardStyled = styled.div`\n  position: relative;\n  overflow: hidden;\n  transition: transform 250ms ease;\n  ${mediaQueries('desktop')`:hover {\n    transform: translateY(-5px);}`}\n\n  img {\n    width: 100%;\n    border-radius: 12px;\n    ${mediaQueries('tablet')`\n    width: 222px;\n    height: 333px;`}\n  }\n\n  h2 {\n    margin-top: 10px;\n    text-align: center;\n    font-size: 20px;\n    ${mediaQueries('tablet')`\n    max-width: 200px;\n    margin-left: auto;\n    margin-right: auto;`}\n  }\n`;\n\nexport const InfoButtonStyled = styled.span`\n  position: absolute;\n  top: 0;\n  right: 0;\n  padding: 6px;\n`;\n\nexport const InfoIcon = styled(FiInfo)`\n  width: 22px;\n  height: 22px;\n  color: var(--text);\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport useWindowWidth from 'hooks/useWindowWidth';\nimport { HoverInfo } from 'components/HoverInfo/HoverInfo';\nimport { InfoButtonStyled, InfoIcon, ItemCardStyled } from './ItemCard.styled';\nimport { randomStubImg } from 'images/images';\nimport { useState } from 'react';\n\nexport const ItemCard = ({ item, type }) => {\n  const location = useLocation();\n  const width = useWindowWidth();\n\n  const [isShowDetails, setIsShowDetails] = useState(false);\n\n  return (\n    <>\n      <ItemCardStyled>\n        <Link to={`/details/${type}/${item.id}`} state={{ from: location }}>\n          <img\n            src={\n              item.poster_path\n                ? `https://image.tmdb.org/t/p/w500${item.poster_path}`\n                : randomStubImg()\n            }\n            alt={item.title || item.name}\n          />\n          <h2>{item.title || item.name}</h2>\n        </Link>\n        {width > 1280 && item.vote_count > 0 && (\n          <InfoButtonStyled\n            onMouseOver={() => setIsShowDetails(true)}\n            onMouseOut={() => setIsShowDetails(false)}\n          >\n            <InfoIcon />\n          </InfoButtonStyled>\n        )}\n        {isShowDetails && (\n          <HoverInfo item={item} setIsShowDetails={setIsShowDetails} />\n        )}\n      </ItemCardStyled>\n    </>\n  );\n};\n","const images = {\n  0: require('./cow.jpg'),\n  1: require('./sheep.jpg'),\n  2: require('./dog.jpg'),\n  3: require('./fox.jpg'),\n  4: require('./mole.jpg'),\n};\n\nexport const randomStubImg = () => {\n  const random = Math.floor(Math.random() * 5);\n  return images[random];\n};\n","import { FiArrowLeft } from 'react-icons/fi';\nimport { Link, NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { mediaQueries } from 'styles/mediaQueries';\nimport BGImgDesk from '../../images/BGImgDesk.jpg';\n\nexport const DetailsSectionStyled = styled.section`\n  padding: 20px 0 30px;\n  @media screen and (min-width: 1280px) {\n    background-image: url(${BGImgDesk});\n    background-size: cover;\n  }\n\n  h2 {\n    margin: 20px 0 6px;\n  }\n`;\n\nexport const BackLink = styled(Link)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 30px;\n  height: 30px;\n  margin-bottom: 14px;\n  border: 2px solid var(--text);\n  border-radius: 50%;\n`;\n\nexport const DetailsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  ${mediaQueries('tablet')`\n  flex-direction: row;\n  gap: 30px;`}\n\n  img {\n    width: 100%;\n    border-radius: 10px;\n    ${mediaQueries('tablet')`\n    width: 222px;\n    height: 333px;`}\n  }\n`;\n\nexport const MainInfoStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n  ${mediaQueries('tablet')`gap: 20px;`}\n\n  h1 {\n    text-align: center;\n    ${mediaQueries('tablet')`text-align: left;`}\n  }\n\n  span {\n    font-weight: bold;\n  }\n`;\n\nexport const AdditionalLink = styled(NavLink)`\n  display: inline-block;\n  padding: 8px 16px 0;\n  border-top-left-radius: 8px;\n  border-top-right-radius: 8px;\n  color: var(--title);\n  &.active {\n    background-color: var(--bgSec);\n  }\n`;\n\nexport const BackIcon = styled(FiArrowLeft)`\n  width: 20px;\n  height: 20px;\n  color: var(--text);\n`;\n","import styled from 'styled-components';\n\nexport const DetailsGenresListStyled = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  li:not(:last-child)::after {\n    content: ',\\f100';\n  }\n  a {\n    padding: 10px 0;\n  }\n`;\n","import { Link, useParams } from 'react-router-dom';\nimport { DetailsGenresListStyled } from './DetailsGenresList.styled';\n\nexport const DetailsGenres = ({ genres }) => {\n  const { type } = useParams();\n\n  return (\n    <>\n      <h2>Genres</h2>\n      <DetailsGenresListStyled>\n        {genres &&\n          genres.map(genre => {\n            const { id, name } = genre;\n\n            return (\n              <li key={id}>\n                <Link to={`/${type}/${id}/${name.toLowerCase()}`}>{name}</Link>\n              </li>\n            );\n          })}\n      </DetailsGenresListStyled>\n    </>\n  );\n};\n","import styled from 'styled-components';\nimport { mediaQueries } from 'styles/mediaQueries';\n\nexport const SimilarListStyled = styled.ul`\n  display: flex;\n  margin-top: 16px;\n  flex-direction: column;\n  justify-content: center;\n  gap: 20px;\n  ${mediaQueries('tablet')`\n  flex-direction: row;\n  flex-wrap: wrap;`}\n  ${mediaQueries('desktop')`\n  gap: 30px 26px;`}\n`;\n","import { ItemCard } from 'components/ItemCard/ItemCard';\nimport { SimilarListStyled } from './SimilarList.styled';\nimport { useEffect, useState } from 'react';\nimport { fetch } from 'API';\nimport useWindowWidth from 'hooks/useWindowWidth';\nimport { useParams } from 'react-router-dom';\nimport { Container } from 'components/Container/Container';\n\nexport const Similar = () => {\n  const { id, type } = useParams();\n  const width = useWindowWidth();\n\n  const [similar, setSimilar] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const getSimilar = async () => {\n      try {\n        setLoading(true);\n        const {\n          data: { results },\n        } = await fetch(`/${type}/${id}/recommendations?language=en-US&page=1`);\n        setSimilar(results.slice(0, width > 1279 ? 5 : 3));\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getSimilar();\n  }, [id, type, width]);\n\n  if (useEffect && similar.length > 0) {\n    return (\n      <Container>\n        <h2>More like this</h2>\n        <SimilarListStyled>\n          {similar.map(item => {\n            return (\n              <li key={item.id}>\n                <ItemCard item={item} />\n              </li>\n            );\n          })}\n        </SimilarListStyled>\n        {error && <p>{error}</p>}\n        {loading && <p>Loading...</p>}\n      </Container>\n    );\n  }\n};\n","import { useParams, Outlet, useLocation } from 'react-router-dom';\nimport { useState, useEffect, Suspense } from 'react';\nimport { fetch } from 'API';\nimport { Container } from 'components/Container/Container';\nimport { randomStubImg } from 'images/images';\nimport {\n  AdditionalLink,\n  BackIcon,\n  BackLink,\n  DetailsSectionStyled,\n  DetailsWrapper,\n  MainInfoStyled,\n} from './Details.styled';\nimport { DetailsGenres } from 'components/DetailsGenres/DetailsGenres';\nimport { Similar } from 'components/Similar/Similar';\n\nconst Details = () => {\n  const { id, type } = useParams();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n\n  const [details, setDetails] = useState({});\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const getDetails = async () => {\n      try {\n        setLoading(true);\n        const { data } = await fetch(`/${type}/${id}`);\n        setDetails(data);\n        window.scrollTo({ top: 0 });\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getDetails();\n  }, [id, type]);\n\n  const { poster_path, tagline, vote_average, vote_count, overview, genres } =\n    details;\n\n  return (\n    <DetailsSectionStyled>\n      <Container>\n        <BackLink to={backLinkHref}>\n          <BackIcon />\n        </BackLink>\n        <DetailsWrapper>\n          <img\n            src={\n              poster_path\n                ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                : randomStubImg()\n            }\n            alt={details.title || details.name}\n          />\n          <MainInfoStyled>\n            <h1>{details.title || details.name}</h1>\n            <p>\n              <span>User score: </span>\n              {`${vote_average && vote_average.toFixed(2)} (${vote_count})`}\n            </p>\n            {tagline && (\n              <p>\n                <span>Tagline: </span>\n                {`\"${tagline}\"`}\n              </p>\n            )}\n            {details.runtime ? (\n              <>\n                <p>\n                  <span>Release date: </span>\n                  {details.release_date}\n                </p>\n                <p>\n                  <span>Runtime: </span>\n                  {`${details.runtime} min`}\n                </p>\n              </>\n            ) : (\n              <>\n                <p>\n                  <span>First air date: </span>\n                  {details.first_air_date}\n                </p>\n                <p>\n                  <span>Number of seasons: </span>\n                  {details.number_of_seasons}\n                </p>\n                <p>\n                  <span>Number of episodes: </span>\n                  {details.number_of_episodes}\n                </p>\n                <p>\n                  <span>Episode runtime: </span>\n                  {`${details.episode_run_time} min`}\n                </p>\n              </>\n            )}\n          </MainInfoStyled>\n        </DetailsWrapper>\n        <h2>Overview</h2>\n        <p>{overview}</p>\n        <DetailsGenres genres={genres} />\n        <h2>Additional information</h2>\n        <AdditionalLink to=\"cast\">Cast</AdditionalLink>\n        <AdditionalLink to=\"reviews\">Reviews</AdditionalLink>\n        {error && <p>{error}</p>}\n        {loading && <p>Loading...</p>}\n        <Suspense fallback={null}>\n          <Outlet />\n        </Suspense>\n      </Container>\n      <Similar />\n    </DetailsSectionStyled>\n  );\n};\n\nexport default Details;\n"],"names":["HoverInfoStyled","styled","HoverInfo","item","setIsShowDetails","location","useLocation","onMouseOver","console","log","onMouseOut","to","media_type","id","state","from","title","name","vote_average","toFixed","overview","slice","ItemCardStyled","mediaQueries","InfoButtonStyled","InfoIcon","FiInfo","ItemCard","type","width","useWindowWidth","useState","isShowDetails","src","poster_path","randomStubImg","alt","vote_count","images","require","random","Math","floor","DetailsSectionStyled","BGImgDesk","BackLink","Link","DetailsWrapper","MainInfoStyled","AdditionalLink","NavLink","BackIcon","FiArrowLeft","DetailsGenresListStyled","DetailsGenres","genres","useParams","map","genre","toLowerCase","SimilarListStyled","Similar","similar","setSimilar","error","setError","loading","setLoading","useEffect","getSimilar","fetch","results","data","length","Container","backLinkHref","details","setDetails","getDetails","window","scrollTo","top","tagline","runtime","release_date","first_air_date","number_of_seasons","number_of_episodes","episode_run_time","Suspense","fallback"],"sourceRoot":""}